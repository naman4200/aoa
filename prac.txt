-----------------------------------------------SELECTION SORT---------------------------------------------
#include <stdio.h>
// Function to perform selection sort
void selectionSort(int array[], int n) {
 int i, j, minIndex, temp;
 for (i = 0; i < n - 1; i++) {
 minIndex = i;
 // Find the index of the minimum element in the unsorted part of the array
 for (j = i + 1; j < n; j++) {
 if (array[j] < array[minIndex]) {
 minIndex = j;
 }
 }
 // Swap the minimum element with the first element of the unsorted part
 temp = array[minIndex];
 array[minIndex] = array[i];
 array[i] = temp;
 }
}
// Function to print the array
void printArray(int array[], int n) {
 int i;
 for (i = 0; i < n; i++)
 printf("%d ", array[i]);
 printf("\n");
}
// Main function
int main() {
 int array[] = {64, 25, 12, 22, 11};
 int n = sizeof(array) / sizeof(array[0]);
 printf("Original array: \n");
 printArray(array, n);
 selectionSort(array, n);
 printf("Sorted array: \n");
 printArray(array, n);
 return 0;
}

-----------------------------------------INSERTION SORT----------------------------------------
#include <stdio.h>
// Function to perform insertion sort
void insertionSort(int array[], int n) {
 int i, key, j;
 for (i = 1; i < n; i++) {
 key = array[i];
 j = i - 1;
 /* Move elements of array[0..i-1], that are greater than key, to one position ahead
 of their current position */
 while (j >= 0 && array[j] > key) {
 array[j + 1] = array[j];
 j = j - 1;
 }
 array[j + 1] = key;
 }
}
// Function to print the array
void printArray(int array[], int n) {
 int i;
 for (i = 0; i < n; i++)
 printf("%d ", array[i]);
 printf("\n");
}
// Main function
int main() {
 int array[] = {12, 11, 13, 5, 6};
 int n = sizeof(array) / sizeof(array[0]);
 printf("Original array: \n");
 printArray(array, n);
 insertionSort(array, n);
 printf("Sorted array: \n");
 printArray(array, n);
 return 0;
}
--------------------------------------MERGE SORT-------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
// Function to merge two subarrays of arr[]
void merge(int arr[], int left, int middle, int right) {
 int i, j, k;
 int n1 = middle - left + 1;
 int n2 = right - middle;
 // Create temporary arrays
 int L[n1], R[n2];
 // Copy data to temporary arrays L[] and R[]
 for (i = 0; i < n1; i++)
 L[i] = arr[left + i];
 for (j = 0; j < n2; j++)
 R[j] = arr[middle + 1 + j];
 // Merge the temporary arrays back into arr[left..right]
 i = 0; // Initial index of first subarray
 j = 0; // Initial index of second subarray
 k = left; // Initial index of merged subarray
 while (i < n1 && j < n2) {
 if (L[i] <= R[j]) {
 arr[k] = L[i];
 i++;
 } else {
 arr[k] = R[j];
 j++;
 }
 k++;
 }
 // Copy the remaining elements of L[], if there are any
 while (i < n1) {
 arr[k] = L[i];
 i++;
 k++;
 }
 // Copy the remaining elements of R[], if there are any
 while (j < n2) {
 arr[k] = R[j];
 j++;
 k++;
 }
}
// Main function to perform merge sort on the given array
void mergeSort(int arr[], int left, int right) {
 if (left < right) {
 // Same as (left+right)/2, but avoids overflow for large left and right
 int middle = left + (right - left) / 2;
 // Sort first and second halves
 mergeSort(arr, left, middle);
 mergeSort(arr, middle + 1, right);
 // Merge the sorted halves
 merge(arr, left, middle, right);
 }
}
// Function to print an array
void printArray(int A[], int size) {
 for (int i = 0; i < size; i++)
 printf("%d ", A[i]);
 printf("\n");
}
int main() {
 int n;
 // Get the size of the array from the user
 printf("Enter the number of elements: ");
 scanf("%d", &n);
 // Dynamically allocate memory for the array
 int* arr = (int*)malloc(n * sizeof(int));
 // Get the elements of the array from the user
 printf("Enter the elements:\n");
 for (int i = 0; i < n; i++)
 scanf("%d", &arr[i]);
 // Perform merge sort
 mergeSort(arr, 0, n - 1);
 // Print the sorted array
 printf("Sorted array: ");
 printArray(arr, n);
 // Free dynamically allocated memory
 free(arr);
 return 0;
}
------------------------------------------------------------QUICK SORT----------------------------------------------------
#include <stdio.h> 
// Function to swap two elements 
void swap(int* a, int* b) { 
 int t = *a; 
 *a = *b; 
 *b = t; 
} 
// Function to partition the array using the last element as pivot 
int partition(int arr[], int low, int high) { 
 int pivot = arr[high]; // pivot 
 int i = (low - 1); // Index of smaller element 
 for (int j = low; j <= high - 1; j++) { 
 // If current element is smaller than or equal to pivot 
 if (arr[j] <= pivot) { 
 i++; // increment index of smaller element 
 swap(&arr[i], &arr[j]); 
 } 
 } 
 swap(&arr[i + 1], &arr[high]); 
 return (i + 1); 
} 
// Function to implement quicksort 
void quickSort(int arr[], int low, int high) { 
 if (low < high) { 
 // pi is partitioning index, arr[pi] is now at right place 
 int pi = partition(arr, low, high); 
 // Separately sort elements before and after partition 
 quickSort(arr, low, pi - 1); 
 quickSort(arr, pi + 1, high); 
 } 
} 
// Function to print an array 
void printArray(int arr[], int size) { 
 int i; 
 for (i = 0; i < size; i++) 
 printf("%d ", arr[i]); 
 printf("\n"); 
} 
int main() { 
 int arr[] = {10, 7, 8, 9, 1, 5}; 
 int n = sizeof(arr) / sizeof(arr[0]); 
 printf("Unsorted array: \n"); 
 printArray(arr, n); 
 quickSort(arr, 0, n - 1); 
 printf("Sorted array: \n"); 
 printArray(arr, n); 
 return 0; 
} 
----------------------------------------------MIN AND MAX ELEM------------------------------------------------------------
#include <stdio.h>
#define MAX_SIZE 100 
int main(){
 int arr[MAX_SIZE];
 int i, max, min, size;
 printf("Enter size of the array: ");
 scanf("%d", &size);
 printf("Enter elements in the array: ");
 for(i=0; i<size; i++){
 scanf("%d", &arr[i]);
 }
 max = arr[0];
 min = arr[0];
 for(i=1; i<size; i++){
 if(arr[i] > max) 
 max = arr[i];
 if(arr[i] < min)
 min = arr[i];
 }
 printf("Maximum element = %d\n", max);
 printf("Minimum element = %d", min);
 return 0;
}
---------------------------------------------------KNAPSACK----------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
// Structure to represent an item
struct Item {
 int weight;
 int value;
 double ratio; // Value-to-weight ratio
};
// Function to compare items based on their ratio
int compare(const void* a, const void* b) {
 return ((struct Item*)b)->ratio - ((struct Item*)a)->ratio;
}
// Function to solve the Fractional Knapsack problem
void knapsackFractional(struct Item items[], int n, int capacity) {
 // Calculate value-to-weight ratio for each item
 for (int i = 0; i < n; i++)
 items[i].ratio = (double)items[i].value / items[i].weight;
 // Sort items based on the ratio in non-ascending order
 qsort(items, n, sizeof(items[0]), compare);
 double totalValue = 0.0;
 int currentWeight = 0;
 // Fill the knapsack using greedy approach
 for (int i = 0; i < n; i++) {
 if (currentWeight + items[i].weight <= capacity) {
 // Include the whole item
 currentWeight += items[i].weight;
 totalValue += items[i].value;
 } else {
 // Include a fraction of the item
 double fraction = (double)(capacity - currentWeight) / items[i].weight;
 totalValue += fraction * items[i].value;
 break;
 }
 }
 // Print the result
 printf("Maximum value in the knapsack: %.2lf\n", totalValue);
}
int main() {
 int n, capacity;
 // Get the number of items and knapsack capacity from the user
 printf("Enter the number of items: ");
 scanf("%d", &n);
 printf("Enter the knapsack capacity: ");
 scanf("%d", &capacity);
 // Dynamically allocate memory for the items array
 struct Item* items = (struct Item*)malloc(n * sizeof(struct Item));
 // Get the weight and value of each item from the user
 printf("Enter the weight and value of each item:\n");
 for (int i = 0; i < n; i++) {
 scanf("%d %d", &items[i].weight, &items[i].value);
 }
 // Solve the Fractional Knapsack problem
 knapsackFractional(items, n, capacity);
 // Free dynamically allocated memory
 free(items);
 return 0;
}
-------------------------------------------------------------FLOYD WARSHALL----------------------------------------------
#include <stdio.h>
#define V 4 // Number of vertices in the graph
void floydWarshall(int graph[V][V]) {
 for (int k = 0; k < V; k++) {
 for (int i = 0; i < V; i++) {
 for (int j = 0; j < V; j++) {
 if (graph[i][k] + graph[k][j] < graph[i][j])
 graph[i][j] = graph[i][k] + graph[k][j];
 }
 }
 }
}
int main() {
 int graph[V][V];
 // Get the graph as input from the user
 printf("Enter the adjacency matrix of the graph (%dx%d):\n", V, V);
 for (int i = 0; i < V; i++) {
 for (int j = 0; j < V; j++) {
 scanf("%d", &graph[i][j]);
 }
 }
 // Find and print all pair shortest paths using Floyd-Warshall Algorithm
 floydWarshall(graph);
 printf("All Pair Shortest Paths:\n");
 for (int i = 0; i < V; i++) {
 for (int j = 0; j < V; j++) {
 printf("%d\t", graph[i][j]);
 }
 printf("\n");
 }
 return 0;
}
-----------------------------------------------------------------LCS------------------------------------------------------
#include <stdio.h>
#include <string.h>
#define MAX_LENGTH 100
int max(int a, int b) {
 return (a > b) ? a : b;
}
int lcs(char X[], char Y[], int m, int n) {
 int dp[m + 1][n + 1];
 // Build the DP table
 for (int i = 0; i <= m; i++) {
 for (int j = 0; j <= n; j++) {
 if (i == 0 || j == 0)
 dp[i][j] = 0;
 else if (X[i - 1] == Y[j - 1])
 dp[i][j] = dp[i - 1][j - 1] + 1;
 else
 dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
 }
 }
 return dp[m][n];
}
int main() {
 char X[MAX_LENGTH], Y[MAX_LENGTH];
 // Get input strings from the user
 printf("Enter the first string: ");
 scanf("%s", X);
 printf("Enter the second string: ");
 scanf("%s", Y);
 // Find and print the length of the Longest Common Subsequence
 int m = strlen(X);
 int n = strlen(Y);
 int length = lcs(X, Y, m, n);
 printf("Length of Longest Common Subsequence: %d\n", length);
 return 0;
}
